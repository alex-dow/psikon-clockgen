// #define ENC_DECODER (1 << 2)
#include <Arduino.h>
#include "tft_espi_setup.h"
#include <TFT_eSPI.h> // Graphics and font library for ST7735 driver chip
#include <SPI.h>
#include <NewEncoder.h>
#include <Wire.h>
#include <EncButton.h>
#include "./dac/MCP48xx.h"
#include "./dac/waveUtils.h"
#include "./ui/theme.h"
#include "./ui/channel.h"

/*** COMPILE TIME PARAMETERS ***/
/*** MCP4822 SETUP ***/
#define MCP_SPI_CS 15
#define MCP_SPI_LATCH 2
#define MCP_SPI VSPI
#define MAX_MCP_FREQ 44000

/*** ENCODER SETUP ***/
#define ENCODER_SW_PIN 27
#define ENCODER_DT_PIN 26
#define ENCODER_CLK_PIN 25

/*** SCREEN SETUP ***/
#define TFT_SCREEN_W 320
#define TFT_SCREEN_H 240

/*** BUTTONS SETUP ***/
#define BTN_A_PIN 18
#define BTN_B_PIN 19

/*** USER CONFIG VALUES ***/
uint16_t mcp_buffer_size = 4095; // default to 12 bits
uint8_t ui_theme = Theme::LIGHT;

/*** COMPONENTS ***/
TFT_eSPI tft = TFT_eSPI(); // Invoke library, pins defined in User_Setup.h
NewEncoder encoder(ENCODER_CLK_PIN, ENCODER_DT_PIN, -1, 1, 0, 4);
MCP4822 MCP(MCP_SPI_CS);
Channel chnA(MCP, CHANNEL_A);
Channel chnB(MCP, CHANNEL_B);
Button encButton(ENCODER_SW_PIN);
Button buttonA(BTN_A_PIN);
Button buttonB(BTN_B_PIN);

/*** CONFIG VARIABLES ***/
float freq = 40.0;
float lastFreq = -1;
float multiplier = 10;
uint16_t wave = Wave::SINE;

int selectedChannel = -1;
int highlightedChannel = 0;
int lastSelectedChannel = -1;
int lastHighlightedChannel = -1;
int maxChannels = 4;

float channelFrequencies[4] = {
    220, 440, 220, 440};

int channelBoxDimensions[4][4] = {
    {0, 0, TFT_SCREEN_W / 2, TFT_SCREEN_H / 2},
    {TFT_SCREEN_W / 2, 0, TFT_SCREEN_W / 2, TFT_SCREEN_H / 2},
    {0, TFT_SCREEN_H / 2, TFT_SCREEN_W / 2, TFT_SCREEN_H / 2},
    {TFT_SCREEN_W / 2, TFT_SCREEN_H / 2, TFT_SCREEN_W / 2, TFT_SCREEN_H / 2}};

int highlightBoxes[4][4] = {
    {channelBoxDimensions[0][0] + 1, channelBoxDimensions[0][1] + 1, channelBoxDimensions[0][2] - 1, channelBoxDimensions[0][3] - 1},
    {channelBoxDimensions[1][0] + 1, channelBoxDimensions[1][1] + 1, channelBoxDimensions[1][2] - 1, channelBoxDimensions[1][3] - 1},
    {channelBoxDimensions[2][0] + 1, channelBoxDimensions[2][1] + 1, channelBoxDimensions[2][2] - 1, channelBoxDimensions[2][3] - 1},
    {channelBoxDimensions[3][0] + 1, channelBoxDimensions[3][1] + 1, channelBoxDimensions[3][2] - 1, channelBoxDimensions[3][3] - 1}};

int selectBoxes[4][4] = {
    {channelBoxDimensions[0][0] + 2, channelBoxDimensions[0][1] + 2, channelBoxDimensions[0][2] - 3, channelBoxDimensions[0][3] - 3},
    {channelBoxDimensions[1][0] + 2, channelBoxDimensions[1][1] + 2, channelBoxDimensions[1][2] - 3, channelBoxDimensions[1][3] - 3},
    {channelBoxDimensions[2][0] + 2, channelBoxDimensions[2][1] + 2, channelBoxDimensions[2][2] - 3, channelBoxDimensions[2][3] - 3},
    {channelBoxDimensions[3][0] + 2, channelBoxDimensions[3][1] + 2, channelBoxDimensions[3][2] - 3, channelBoxDimensions[3][3] - 3}};

void renderChannel(int channelNumber)
{
  int fillColor = (selectedChannel == channelNumber) ? TFT_SILVER : bgColor;
  tft.fillRect(
      selectBoxes[channelNumber][0],
      selectBoxes[channelNumber][1],
      selectBoxes[channelNumber][2],
      selectBoxes[channelNumber][3],
      fillColor);

  tft.setCursor(channelBoxDimensions[channelNumber][0] + 2, channelBoxDimensions[channelNumber][1] + 30);
  tft.setTextColor(fgColor);
  tft.setFreeFont(&FreeSans18pt7b);
  tft.setTextSize(1);
  tft.print("CHN ");
  tft.print(channelNumber + 1);
  tft.setTextFont(4);
  tft.setTextSize(1);
  tft.setCursor(channelBoxDimensions[channelNumber][0] + 2, channelBoxDimensions[channelNumber][1] + 50);
  tft.print("F: ");
  tft.print(channelFrequencies[channelNumber]);
  tft.print("hz");
}

void renderChannelPage()
{
  renderChannel(0);
  renderChannel(1);
  renderChannel(2);
  renderChannel(3);
}

void highlightChannel(int channel)
{
  if (channel != lastHighlightedChannel)
  {
    if (lastHighlightedChannel > -1)
    {
      tft.drawRect(
          highlightBoxes[lastHighlightedChannel][0],
          highlightBoxes[lastHighlightedChannel][1],
          highlightBoxes[lastHighlightedChannel][2],
          highlightBoxes[lastHighlightedChannel][3],
          bgColor);
    }

    tft.drawRect(
        highlightBoxes[channel][0],
        highlightBoxes[channel][1],
        highlightBoxes[channel][2],
        highlightBoxes[channel][3],
        TFT_RED);

    Serial.print("Highlight channel #");
    Serial.println(channel);

    lastHighlightedChannel = channel;
  }
}

void deselectChannel(int channel)
{
  lastSelectedChannel = -1;
  tft.drawRect(
      selectBoxes[channel][0],
      selectBoxes[channel][1],
      selectBoxes[channel][2],
      selectBoxes[channel][3],
      bgColor);
  Serial.print("Deselect channel #");
  Serial.println(channel);
  selectedChannel = -1;
  renderChannel(channel);
}

void selectChannel(int channel)
{
  if (channel != lastSelectedChannel && lastSelectedChannel > -1)
  {
    tft.drawRect(
        selectBoxes[lastSelectedChannel][0],
        selectBoxes[lastSelectedChannel][1],
        selectBoxes[lastSelectedChannel][2],
        selectBoxes[lastSelectedChannel][3],
        bgColor);
    renderChannel(lastSelectedChannel);
  }

  tft.drawRect(
      selectBoxes[channel][0],
      selectBoxes[channel][1],
      selectBoxes[channel][2],
      selectBoxes[channel][3],
      TFT_GREEN);
  renderChannel(channel);
  Serial.print("Select channel #");
  Serial.println(channel);
  lastSelectedChannel = channel;
}

void boot()
{
  Serial.begin(115200);
  while (!Serial)
    ;
  delay(1000);
  Serial.println("/*** SIGNAL GENERATOR ***/");

  /* #region Init Screen */
  Serial.println("[init] Screen ");

  tft.init();

  tft.setRotation(1);
  tft.fillScreen(bgColor);
  tft.setCursor(2, 25);
  tft.setTextColor(fgColor);
  tft.setFreeFont(&FreeSansBold12pt7b);
  tft.setTextSize(1);
  tft.println("CLOCKGEN v0.0.1");
  delay(500);
  tft.setFreeFont(&FreeSansBold9pt7b);

  /* #endregion */

  /* #region Init DACs */
  tft.setTextColor(fgColor);
  tft.print("Initialize DACs ... ");
  Serial.println("[init] MCP4822");
  MCP.init();

  delay(100);

#ifdef ESP32
  Serial.println("Set gain to low");
  MCP.setGainA(MCP4822::Low);
  MCP.setGainB(MCP4822::Low);
#endif
  MCP.updateDAC();
  tft.setTextColor(successColor);
  tft.println("OK");
  delay(100);
  /* #endregion */

  /* #region Init Encoder */
  Serial.println("[init] Encoder");
  tft.setTextColor(fgColor);
  tft.print("Init Encoder ... ");
  if (!encoder.begin())
  {
    Serial.println("Encoder failed");
    tft.setTextColor(errorColor);
    tft.print("Failed!");
    while (1)
    {
    }
  }

  delay(250);
  tft.setTextColor(successColor);
  tft.println("OK");
  delay(250);
  /* #endregion */

  /* #region Init Channels */
  Serial.println("[init] Channels");
  tft.setTextColor(fgColor);
  tft.print("Init channels ... ");
  chnA.on();
  chnA.setBufferSize(mcp_buffer_size);
  chnA.setWave(Wave::SINE);
  chnA.setFrequency(440);

  chnB.on();
  chnB.setBufferSize(mcp_buffer_size);
  chnB.setWave(Wave::SINE);
  chnB.setFrequency(220);

  MCP.updateDAC();

  delay(250);
  tft.setTextColor(successColor);
  tft.println("OK");
  /* #endregion */

  delay(250);
  tft.println("Ready!");
  delay(1000);
  tft.fillScreen(bgColor);
  renderChannelPage();
  highlightChannel(0);
}

void setup(void)
{
  boot();
}

uint16_t lastWaveIndex = 0;
uint16_t waveIndex = 0;

uint32_t now = 0;
uint32_t delta = 0;
uint32_t lastTime = 0;

void tickChannels()
{
  chnA.tick();
  chnB.tick();
  MCP.updateDAC();
}

NewEncoder::EncoderState currentEncoderState;
int lastEncoderValue = 0;
void tickEncoder()
{
  if (encoder.getState(currentEncoderState))
  {
    int currentValue = currentEncoderState.currentValue;
    if (lastEncoderValue != currentValue)
    {
      int delta = lastEncoderValue - currentValue;
      if (delta > 0)
      {
        if (selectedChannel != -1)
        {
          channelFrequencies[selectedChannel] = channelFrequencies[selectedChannel] + (1 * multiplier);
          if (selectedChannel == 0)
          {
            chnA.setFrequency(channelFrequencies[selectedChannel]);
          }
          else if (selectedChannel == 1)
          {
            chnB.setFrequency(channelFrequencies[selectedChannel]);
          }
          renderChannel(selectedChannel);
        }
        else
        {
          highlightedChannel++;
          if (highlightedChannel == maxChannels)
          {
            highlightedChannel = 0;
          }
        }
      }
      else if (delta < 0)
      {
        if (selectedChannel != -1)
        {
          channelFrequencies[selectedChannel] = channelFrequencies[selectedChannel] - (1 * multiplier);
          if (selectedChannel == 0)
          {
            chnA.setFrequency(channelFrequencies[selectedChannel]);
          }
          else if (selectedChannel == 1)
          {
            chnB.setFrequency(channelFrequencies[selectedChannel]);
          }
          renderChannel(selectedChannel);
        }
        else if (highlightedChannel == 0)
        {
          highlightedChannel = maxChannels - 1;
        }
        else
        {
          highlightedChannel--;
        }
      }

      highlightChannel(highlightedChannel);
    }
  }

  encButton.tick();
  if (encButton.click())
  {
    if (highlightedChannel == selectedChannel)
    {
      deselectChannel(selectedChannel);
      selectedChannel = -1;
    }
    else
    {
      selectedChannel = highlightedChannel;
      selectChannel(selectedChannel);
    }
  }

  /*
  if (encoder.encoderChanged())
  {
    int newEncoderValue = encoder.readEncoder();
    int delta = lastEncoderValue - newEncoderValue;
    ;
    if (delta > 0 && highlightedChannel <= maxChannels)
    {
      highlightedChannel++;
      if (highlightedChannel != selectedChannel)
      {
        highlightChannel(highlightedChannel);
      }
    }
    else if (delta < 0 && highlightedChannel > 0)
    {
      highlightedChannel--;
      if (highlightedChannel != selectedChannel)
      {
        highlightChannel(highlightedChannel);
      }
    }
    lastEncoderValue = newEncoderValue;
  }
  */

  /*
   if (encoder.isEncoderButtonClicked())
   {
     selectedChannel = highlightedChannel;
     selectChannel(selectedChannel);
   }
   */
}

void loop()
{
  now = micros();
  delta = now - lastTime;
  lastTime = now;

  tickEncoder();
  tickChannels();
}